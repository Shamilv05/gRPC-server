// Code generated by protoc-gen-go. DO NOT EDIT.
// source: uuid.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UUID struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UUID) Reset()         { *m = UUID{} }
func (m *UUID) String() string { return proto.CompactTextString(m) }
func (*UUID) ProtoMessage()    {}
func (*UUID) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b0c78c62e9a4add, []int{0}
}

func (m *UUID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UUID.Unmarshal(m, b)
}
func (m *UUID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UUID.Marshal(b, m, deterministic)
}
func (m *UUID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UUID.Merge(m, src)
}
func (m *UUID) XXX_Size() int {
	return xxx_messageInfo_UUID.Size(m)
}
func (m *UUID) XXX_DiscardUnknown() {
	xxx_messageInfo_UUID.DiscardUnknown(m)
}

var xxx_messageInfo_UUID proto.InternalMessageInfo

func (m *UUID) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b0c78c62e9a4add, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UUID)(nil), "uuidsender.UUID")
	proto.RegisterType((*Empty)(nil), "uuidsender.Empty")
}

func init() { proto.RegisterFile("uuid.proto", fileDescriptor_2b0c78c62e9a4add) }

var fileDescriptor_2b0c78c62e9a4add = []byte{
	// 112 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0xcd, 0x4c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x02, 0xb3, 0x8b, 0x53, 0xf3, 0x52, 0x52, 0x8b, 0x94,
	0xa4, 0xb8, 0x58, 0x42, 0x43, 0x3d, 0x5d, 0x84, 0x84, 0xb8, 0x58, 0x40, 0xa2, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x12, 0x3b, 0x17, 0xab, 0x6b, 0x6e, 0x41, 0x49, 0xa5, 0x91,
	0x35, 0x17, 0x17, 0x48, 0x51, 0x30, 0x58, 0x8b, 0x90, 0x2e, 0x17, 0x9b, 0x67, 0x0a, 0x88, 0x2d,
	0x24, 0xa8, 0x87, 0x30, 0x49, 0x0f, 0xac, 0x54, 0x4a, 0x00, 0x59, 0x08, 0xa4, 0x29, 0x89, 0x0d,
	0x6c, 0xa9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x33, 0xcc, 0xf0, 0x3c, 0x82, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UUIDSenderClient is the  API for UUIDSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UUIDSenderClient interface {
	IdSend(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UUID, error)
}

type uUIDSenderClient struct {
	cc *grpc.ClientConn
}

func NewUUIDSenderClient(cc *grpc.ClientConn) UUIDSenderClient {
	return &uUIDSenderClient{cc}
}

func (c *uUIDSenderClient) IdSend(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/uuidsender.UUIDSender/IdSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UUIDSenderServer is the server API for UUIDSender service.
type UUIDSenderServer interface {
	IdSend(context.Context, *Empty) (*UUID, error)
}

// UnimplementedUUIDSenderServer can be embedded to have forward compatible implementations.
type UnimplementedUUIDSenderServer struct {
}

func (*UnimplementedUUIDSenderServer) IdSend(ctx context.Context, req *Empty) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdSend not implemented")
}

func RegisterUUIDSenderServer(s *grpc.Server, srv UUIDSenderServer) {
	s.RegisterService(&_UUIDSender_serviceDesc, srv)
}

func _UUIDSender_IdSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UUIDSenderServer).IdSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uuidsender.UUIDSender/IdSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UUIDSenderServer).IdSend(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UUIDSender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uuidsender.UUIDSender",
	HandlerType: (*UUIDSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IdSend",
			Handler:    _UUIDSender_IdSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uuid.proto",
}
