// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: uuid.proto

#include "uuid.pb.h"
#include "uuid.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace uuidsender {

static const char* UUIDSender_method_names[] = {
  "/uuidsender.UUIDSender/GetValue",
};

std::unique_ptr< UUIDSender::Stub> UUIDSender::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UUIDSender::Stub> stub(new UUIDSender::Stub(channel));
  return stub;
}

UUIDSender::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetValue_(UUIDSender_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UUIDSender::Stub::GetValue(::grpc::ClientContext* context, const ::uuidsender::Empty& request, ::uuidsender::UUID* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetValue_, context, request, response);
}

void UUIDSender::Stub::experimental_async::GetValue(::grpc::ClientContext* context, const ::uuidsender::Empty* request, ::uuidsender::UUID* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetValue_, context, request, response, std::move(f));
}

void UUIDSender::Stub::experimental_async::GetValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::uuidsender::UUID* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetValue_, context, request, response, std::move(f));
}

void UUIDSender::Stub::experimental_async::GetValue(::grpc::ClientContext* context, const ::uuidsender::Empty* request, ::uuidsender::UUID* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetValue_, context, request, response, reactor);
}

void UUIDSender::Stub::experimental_async::GetValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::uuidsender::UUID* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uuidsender::UUID>* UUIDSender::Stub::AsyncGetValueRaw(::grpc::ClientContext* context, const ::uuidsender::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::uuidsender::UUID>::Create(channel_.get(), cq, rpcmethod_GetValue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::uuidsender::UUID>* UUIDSender::Stub::PrepareAsyncGetValueRaw(::grpc::ClientContext* context, const ::uuidsender::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::uuidsender::UUID>::Create(channel_.get(), cq, rpcmethod_GetValue_, context, request, false);
}

UUIDSender::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UUIDSender_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UUIDSender::Service, ::uuidsender::Empty, ::uuidsender::UUID>(
          std::mem_fn(&UUIDSender::Service::GetValue), this)));
}

UUIDSender::Service::~Service() {
}

::grpc::Status UUIDSender::Service::GetValue(::grpc::ServerContext* context, const ::uuidsender::Empty* request, ::uuidsender::UUID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace uuidsender

